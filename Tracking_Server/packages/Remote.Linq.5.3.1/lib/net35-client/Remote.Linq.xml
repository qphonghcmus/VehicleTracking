<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Remote.Linq</name>
    </assembly>
    <members>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the <see cref="T:System.Linq.Expressions.Expression"/> and returns the raw result
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> to be executed</param>
            <returns>Execution result of the <see cref="T:System.Linq.Expressions.Expression"/> specified</returns>
        </member>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.Execute(Remote.Linq.Expressions.Expression,System.Func{System.Type,System.Linq.IQueryable},Aqua.TypeSystem.ITypeResolver,Aqua.Dynamic.IDynamicObjectMapper,System.Func{System.Type,System.Boolean})">
            <summary>
            Composes and executes the query based on the <see cref="T:Remote.Linq.Expressions.Expression"/> and mappes the result into dynamic objects
            </summary>
            <param name="expression">The <see cref="T:Remote.Linq.Expressions.Expression"/> to be executed</param>
            <param name="queryableProvider">Delegate to provide <see cref="T:System.Linq.IQueryable"/> instances based on <see cref="T:System.Type"/>s</param>
            <param name="typeResolver">Optional instance of <see cref="T:Aqua.TypeSystem.ITypeResolver"/> to be used to translate <see cref="T:Aqua.TypeSystem.TypeInfo"/> into <see cref="T:System.Type"/> objects</param>
            <param name="mapper">Optional instance of <see cref="T:Aqua.Dynamic.IDynamicObjectMapper"/></param>
            <returns>The mapped result of the query execution</returns>
        </member>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.ConvertResultToDynamicObjects(System.Object,Aqua.Dynamic.IDynamicObjectMapper,System.Func{System.Type,System.Boolean})">
            <summary>
            Converts the query result into a collection of <see cref="T:Aqua.Dynamic.DynamicObject"/>
            </summary>
            <param name="queryResult">The reult of the query execution</param>
            <param name="mapper">Optional instance of <see cref="T:Aqua.Dynamic.IDynamicObjectMapper"/></param>
            <returns>The mapped query result</returns>
        </member>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.PrepareForExecution(Remote.Linq.Expressions.Expression,System.Func{System.Type,System.Linq.IQueryable},Aqua.TypeSystem.ITypeResolver)">
            <summary>
            Prepares the query <see cref="T:Remote.Linq.Expressions.Expression"/> to be able to be executed. <para/> 
            Use this method if you wan to execute the <see cref="T:System.Linq.Expressions.Expression"/> and map the raw result yourself.
            </summary>
            <param name="expression">The <see cref="T:Remote.Linq.Expressions.Expression"/> to be executed</param>
            <param name="queryableProvider">Delegate to provide <see cref="T:System.Linq.IQueryable"/> instances based on <see cref="T:System.Type"/>s</param>
            <param name="typeResolver">Optional instance of <see cref="T:Aqua.TypeSystem.ITypeResolver"/> to be used to translate <see cref="T:Aqua.TypeSystem.TypeInfo"/> into <see cref="T:System.Type"/> objects</param>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> ready for execution</returns>
        </member>
        <member name="T:Remote.Linq.ExpressionVisitors.ExpressionEvaluator">
            <summary>  
            Enables the partial evalutation of queries.  
            From http://msdn.microsoft.com/en-us/library/bb546158.aspx  
            </summary>  
        </member>
        <!-- Badly formed XML comment ignored for member "M:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.PartialEval(System.Linq.Expressions.Expression)" -->
        <!-- Badly formed XML comment ignored for member "T:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.SubtreeEvaluator" -->
        <member name="T:Remote.Linq.ExpressionVisitors.ExpressionVisitorBase">
            <summary>
            From http://msdn.microsoft.com/en-us/library/bb882521.aspx
            </summary>
            <remarks>
            In this expression tree visitor implementation, the Visit method, which should be called first, 
            dispatches the expression it is passed to one of the more specialized visitor methods in the class, 
            based on the type of the expression. The specialized visitor methods visit the sub-tree of the 
            expression they are passed. If a sub-expression changes after it has been visited, for example by 
            an overriding method in a derived class, the specialized visitor methods create a new expression 
            that includes the changes in the sub-tree. Otherwise, they return the expression that they were passed. 
            This recursive behavior enables a new expression tree to be built that either is the same as or a 
            modified version of the original expression that was passed to Visit.
            </remarks>
        </member>
        <member name="T:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.Nominator">
            <summary>  
            Performs bottom-up analysis to determine which nodes can possibly  
            be part of an evaluated sub-tree.  
            </summary>  
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToRemoteLinqExpression(System.Linq.Expressions.Expression)">
            <summary>
            Translates a given expression into a remote linq expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToRemoteLinqExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Translates a given lambda expression into a remote linq expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.Expression)">
            <summary>
            Translates a given query expression into an expression
            </summary>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.Expression,Aqua.TypeSystem.ITypeResolver)">
            <summary>
            Translates a given query expression into an expression
            </summary>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression``2(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Translates a given query expression into a lambda expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Translates a given query expression into a lambda expression
            </summary>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.LambdaExpression,Aqua.TypeSystem.ITypeResolver)">
            <summary>
            Translates a given query expression into a lambda expression
            </summary>
        </member>
        <member name="M:Remote.Linq.IQuery.Where(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A lambda expression to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.OrderBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.OrderByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery.ThenBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery.ThenByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.#ctor(System.Type,System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.LambdaExpression},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.SortExpression},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new query instance.
            </summary>
            <param name="type">The type to be queried</param>
        </member>
        <member name="M:Remote.Linq.Query.#ctor(Aqua.TypeSystem.TypeInfo,System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.LambdaExpression},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.SortExpression},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new query instance.
            </summary>
            <param name="typeInfo">The type to be queried</param>
        </member>
        <member name="M:Remote.Linq.Query.Where(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A lambda expression to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.OrderBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.OrderByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Remote#Linq#IOrderedQuery#ThenBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Remote#Linq#IOrderedQuery#ThenByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.CreateFromGeneric``1(Remote.Linq.IQuery{``0})">
            <summary>
            Creates a non-generic version of the specified query instance. 
            </summary>
            <param name="query">The query instance to be converted into a non-generc query object.</param>
            <returns>A non-generic version of the specified query instance.</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.#ctor(System.Func{Remote.Linq.Query{`0},System.Collections.Generic.IEnumerable{`0}},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.LambdaExpression},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.SortExpression},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new query instance
            </summary>
            <param name="dataProvider">A delegate to be invoked to retrieve the actual data</param>
        </member>
        <member name="M:Remote.Linq.Query`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Remote#Linq#IOrderedQuery{T}#ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Remote#Linq#IOrderedQuery{T}#ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.GetEnumerator">
            <summary>
            Enumerating the query actually invokes the data provider to retrieve data
            </summary>
            <returns>The data retrieved from the data provider.</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.CreateFromNonGeneric(Remote.Linq.IQuery,System.Func{Remote.Linq.Query{`0},System.Collections.Generic.IEnumerable{`0}},Aqua.TypeSystem.ITypeResolver)">
            <summary>
            Creates a generic version of the specified query instance. 
            </summary>
            <param name="query">The query instance to be converted into a generc query object.</param>
            <param name="dataProvider">A delegate to be invoked to retrieve the actual data</param>
            <returns>A generic version of the specified query instance.</returns>
            <exception cref="T:System.Exception">If the query's type does not match the generic type.</exception>
        </member>
        <member name="M:Remote.Linq.EnumerableExtensions.AsQueryable``1(System.Collections.Generic.IEnumerable{``0},System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Aqua.Dynamic.DynamicObject}},Aqua.TypeSystem.ITypeResolver,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="dataProvider"></param>
            <param name="typeResolver"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.EnumerableExtensions.ApplyQuery``1(System.Collections.Generic.IEnumerable{``0},Remote.Linq.IQuery{``0})">
            <summary>
            Applies this query instance to an enumerable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.EnumerableExtensions.ApplyQuery``1(System.Collections.Generic.IEnumerable{``0},Remote.Linq.IQuery)">
            <summary>
            Applies this query instance to an enumerable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.AsQueryable``1(System.Linq.IQueryable{``0},System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Aqua.Dynamic.DynamicObject}},Aqua.TypeSystem.ITypeResolver,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <param name="resource"></param>
            <param name="dataProvider"></param>
            <param name="typeResolver"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.AsQueryable``1(System.Linq.IQueryable,System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Aqua.Dynamic.DynamicObject}},Aqua.TypeSystem.ITypeResolver,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="dataProvider"></param>
            <param name="typeResolver"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.ApplyQuery``1(System.Linq.IQueryable{``0},Remote.Linq.IQuery{``0})">
            <summary>
            Applies this query instance to a queryable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.ApplyQuery``1(System.Linq.IQueryable{``0},Remote.Linq.IQuery)">
            <summary>
            Applies this query instance to a queryable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create(System.Type,System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Aqua.Dynamic.DynamicObject}},Aqua.TypeSystem.ITypeResolver,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``1(System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Aqua.Dynamic.DynamicObject}},Aqua.TypeSystem.ITypeResolver,Aqua.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create(System.Type,System.Func{Remote.Linq.Expressions.Expression,System.Object},Aqua.TypeSystem.ITypeResolver,Remote.Linq.IQueryResultMapper{System.Object})">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``1(System.Func{Remote.Linq.Expressions.Expression,System.Object},Aqua.TypeSystem.ITypeResolver,Remote.Linq.IQueryResultMapper{System.Object})">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``1(System.Type,System.Func{Remote.Linq.Expressions.Expression,``0},Remote.Linq.IQueryResultMapper{``0},Aqua.TypeSystem.ITypeResolver)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
            <typeparam name="TSource">Data type served by the data provider</typeparam>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``2(System.Func{Remote.Linq.Expressions.Expression,``1},Remote.Linq.IQueryResultMapper{``1},Aqua.TypeSystem.ITypeResolver)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
            <typeparam name="TSource">Data type served by the data provider</typeparam>
        </member>
        <member name="T:Remote.Linq.VariableQueryArgument">
            <summary>
            This type is used to distinguish variable query arguments from constant query arguments
            </summary>
        </member>
        <member name="T:Remote.Linq.VariableQueryArgument`1">
            <summary>
            This type is used to distinguish variable query arguments from constant query arguments
            </summary>
            <typeparam name="T">Type of the query argument</typeparam>
        </member>
        <member name="T:Remote.Linq.VariableQueryArgumentList">
            <summary>
            This type is used to distinguish variable query arguments from constant query arguments
            </summary>
        </member>
    </members>
</doc>
